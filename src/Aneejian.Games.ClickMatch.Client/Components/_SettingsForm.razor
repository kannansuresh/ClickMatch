<EditForm EditContext="SettingsRequestContext" id="settings-form" class="mb-4" OnValidSubmit="HandleSubmitClick">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-floating mb-3">
		<InputSelect class="form-select" id="selectTheme" aria-label="Select Theme" @bind-Value="@SettingsRequest!.ThemeId" @bind-Value:after="HandleThemeChange">
			@foreach (var theme in Themes!)
			{
				<option value="@theme.ThemeId">@theme.ThemeName</option>
			}
		</InputSelect>
		<label for="selectTheme">Select Theme</label>
	</div>

	<div class="form-floating mb-3">
		<InputSelect class="form-select" id="selectLevel" aria-label="Select Level" @bind-Value="@SettingsRequest!.Level">
			@foreach (int level in GameLevels!)
			{
				<option value="@level">@($"Level {level}")</option>
			}
		</InputSelect>

		<label for="selectLevel">Select Level</label>
		<div id="selectLevelHelpBlock" class="form-text">
			This level will have @(SettingsRequest!.Level * 4) tiles.
		</div>
	</div>


	<div class="form-check mb-3">
		<InputCheckbox class="form-check-input" type="checkbox" @bind-Value=@SettingsRequest.ShowTileNumber id="showTileNumber" />
		<label class="form-check-label" for="showTileNumber">
			Show tile number in the grid
		</label>
	</div>
	<div class="d-grid">
		<button class="btn btn-primary mb-4" id="submitButton" type="submit">Start Game</button>
	</div>
	@if (SelectedTheme!.AttributionRequired && !String.IsNullOrEmpty(SelectedTheme.Attribution))
	{
		<div class="alert alert-info mb-4" role="alert">
			@((MarkupString)SelectedTheme.Attribution)
		</div>
	}
</EditForm>



@code {

	[Parameter] public IEnumerable<IThemeData>? Themes { get; set; }
	[Parameter] public int MaxGameLevel { get; set; } = 50;
	[Parameter] public string? SelectedThemeId { get; set; }
	[Parameter] public int GameLevel { get; set; }
	[Parameter] public bool ShowTileNumber { get; set; } = true;
	[Parameter] public EventCallback<SettingsRequest> OnSubmitClick { get; set; }

	private SettingsRequest? SettingsRequest { get; set; }
	private EditContext? SettingsRequestContext { get; set; }

	private IEnumerable<int>? GameLevels { get; set; }

	private IThemeData? SelectedTheme { get; set; }

	protected override void OnInitialized()
	{
		SelectedThemeId = SelectedThemeId ?? Themes?.FirstOrDefault()?.ThemeId;
		SelectedTheme = Themes?.FirstOrDefault(x => x.ThemeId == SelectedThemeId);
		SetGameLevels();
		SettingsRequest = new SettingsRequest
			{
				ThemeId = SelectedThemeId!,
				Level = GameLevel,
				ShowTileNumber = ShowTileNumber
			};
		SettingsRequestContext = new EditContext(SettingsRequest);
	}

	private void SetGameLevels()
	{
		var imageCount = SelectedTheme?.ItemCount ?? 0;
		var maxLevel = Math.Min(Math.Abs(imageCount / 4), MaxGameLevel);
		GameLevels = Enumerable.Range(1, maxLevel);
	}


	private async Task HandleSubmitClick()
	{
		await OnSubmitClick.InvokeAsync(SettingsRequest);
	}

	private void HandleThemeChange()
	{

		SelectedTheme = Themes?.FirstOrDefault(x => x.ThemeId == SettingsRequest!.ThemeId);
		SetGameLevels();
		StateHasChanged();
	}

}
