@inject IndexedDbService indexedDbService

<EditForm EditContext="SettingsRequestContext" id="settings-form" class="mb-4" OnValidSubmit="HandleSubmitClick">
	<DataAnnotationsValidator />
	<AntiforgeryToken />
	<ValidationSummary />
	<div class="form-floating mb-3">
		<InputSelect class="form-select" id="selectTheme" aria-label="Select Theme" disabled="@DisableThemeSelect"
			@bind-Value="@SettingsRequest!.ThemeId" @bind-Value:after="HandleThemeChange">
			@foreach (var theme in Themes!)
			{
				<option value="@theme.ThemeId">@theme.ThemeName</option>
			}
		</InputSelect>
		<label for="selectTheme">Select Theme</label>
	</div>

	<div class="form-floating mb-3">
		@if (GameLevels == null)
		{
			<p>Loading...</p>
		}
		else
		{
			<InputSelect class="form-select" id="selectLevel" aria-label="Select Level" disabled="@DisableLevelSelect"
				@bind-Value="@SettingsRequest!.Level">
				@foreach (int level in GameLevels!)
				{
					<option value="@level">@($"Level {level}")</option>
				}
			</InputSelect>
		}


		<label for="selectLevel">Select Level</label>
		<div id="selectLevelHelpBlock" class="form-text">
			This level will have @(SettingsRequest!.Level * 4) tiles.
		</div>
	</div>


	<div class="form-check mb-3">
		<InputCheckbox class="form-check-input" type="checkbox" @bind-Value=@SettingsRequest.ShowTileNumber
			id="showTileNumber" />
		<label class="form-check-label" for="showTileNumber">
			Show tile number in the grid
		</label>
	</div>
	<div class="d-grid">
		@if (PlayFromLink)
		{
			<button class="btn btn-lg btn-outline-info mt-2 mb-4" id="submitButton" type="submit">
				<span>Start the Challenge</span>
			</button>

			<_AccessBased>
				<Authorized>
					<p class="alert alert-info"><a class="text-decoration-none" href="">Click here</a> to abandon the
						challenge and
						play
						other levels from your profile.
					</p>
				</Authorized>
			</_AccessBased>
		}
		else
		{
			<button class="btn btn-primary mb-4" id="submitButton" type="submit">
				Start Game
			</button>
		}
	</div>
	@if (SelectedTheme!.AttributionRequired && !String.IsNullOrEmpty(SelectedTheme.Attribution))
	{
		<div class="alert alert-info mb-4" role="alert">
			@((MarkupString)SelectedTheme.Attribution)
		</div>
	}
</EditForm>



@code {

	[Parameter] public IEnumerable<IThemeData>? Themes { get; set; }
	[Parameter] public string? SelectedThemeId { get; set; }
	[Parameter] public int GameLevel { get; set; }
	[Parameter] public bool ShowTileNumber { get; set; } = true;
	[Parameter] public EventCallback<SettingsRequest> OnSubmitClick { get; set; }
	[Parameter] public bool PlayFromLink { get; set; } = false;
	[CascadingParameter(Name = "LoggedInUser")] public UserDto? LoggedInUser { get; set; }
	private SettingsRequest? SettingsRequest { get; set; }
	private EditContext? SettingsRequestContext { get; set; }
	public int UserMaxGameLevel { get; set; } = 1;
	private IEnumerable<int>? GameLevels { get; set; }
	private IThemeData? SelectedTheme { get; set; }

	private bool DisableThemeSelect => Themes?.Count() == 1;
	private bool DisableLevelSelect => GameLevels?.Count() == 1;

	protected override void OnInitialized()
	{
		SharedMethods.Log("SettingsForm OnInitialized");
		SharedMethods.Log($"SelectedThemeId: {SelectedThemeId}, GameLevel: {GameLevel}, ShowTileNumber: {ShowTileNumber}");
		SettingsRequest = new SettingsRequest
			{
				ThemeId = SelectedThemeId!,
				Level = GameLevel,
				ShowTileNumber = ShowTileNumber
			};
		SettingsRequestContext = new EditContext(SettingsRequest);
		base.OnInitialized();
	}

	protected override async Task OnInitializedAsync()
	{
		SelectedThemeId = SelectedThemeId ?? Themes?.FirstOrDefault()?.ThemeId;
		SelectedTheme = Themes?.FirstOrDefault(x => x.ThemeId == SelectedThemeId);
		await SetGameLevels();
	}

	private async Task SetGameLevels()
	{
		var imageCount = SelectedTheme?.ItemCount ?? 0;
		var maxPossibleLevel = Math.Abs(imageCount / 4);
		GameLevel = Math.Min(maxPossibleLevel, GameLevel);
		if (LoggedInUser is null)
		{
			GameLevels = new List<int> { GameLevel };
		}
		else
		{
			UserMaxGameLevel = Math.Max(await GetUserMaxLevel(), 1);
			UserMaxGameLevel = Math.Min(UserMaxGameLevel, maxPossibleLevel);
			GameLevels = Enumerable.Range(1, UserMaxGameLevel).OrderByDescending(x => x);
			GameLevel = GameLevel == 0 ? Math.Max(GameLevel, UserMaxGameLevel) : GameLevel;
		}
		SettingsRequest!.Level = GameLevel;
	}

	private async Task<int> GetUserMaxLevel()
	{
		var level = 1;
		if (LoggedInUser == null) return level;
		try
		{
			level += await indexedDbService.GetUserMaxGameLevel(LoggedInUser!.Id);
			return level;
		}
		catch (Exception ex)
		{
			SharedMethods.Log(ex.ToString());
		}
		return level;
	}


	private async Task HandleSubmitClick()
	{
		if (LoggedInUser is not null) SettingsRequest!.Level = Math.Min(SettingsRequest!.Level, UserMaxGameLevel);
		await OnSubmitClick.InvokeAsync(SettingsRequest);
	}

	private async Task HandleThemeChange()
	{
		SelectedTheme = Themes?.FirstOrDefault(x => x.ThemeId == SettingsRequest!.ThemeId);
		await SetGameLevels();
	}

}
