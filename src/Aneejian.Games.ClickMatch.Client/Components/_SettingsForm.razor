@inject IThemeService themeService


<div class="row settings-form">
	<h4 class="mb-4">Enter your game preference</h4>
	<form id="settings-form" class="mb-4" @onsubmit="HandleSubmitClick">
		<div class="form-floating mb-3">
			<select class="form-select" id="selectTheme" aria-label="Select Theme" value="@SelectedThemeId" @onchange="HandleThemeChange">
				@foreach (var theme in Themes!)
				{
					<option value="@theme.ThemeId">@theme.ThemeName</option>
				}
			</select>
			<label for="selectTheme">Select Theme</label>
		</div>
		<div class="form-floating mb-3">
			<input class="form-control" id="enterNumberOfTiles" type="number" placeholder="Enter number of tiles" max="@(SelectedTheme!.ItemCount * 2)" @bind="TileCount" />
			<label for="enterNumberOfTiles">Enter number of tiles</label>
			<div class="invalid-feedback" data-sb-feedback="enterNumberOfTiles:required">Enter number of tiles is required.</div>
		</div>
		<div class="form-check mb-3">
			<input class="form-check-input" type="checkbox" @bind=ShowTileNumber id="showTileNumber">
			<label class="form-check-label" for="showTileNumber">
				Show tile number in the grid
			</label>
		</div>
		<div class="d-grid">
			<button class="btn btn-primary mb-4" id="submitButton" type="submit">Start Game</button>
		</div>
		@if (SelectedTheme.AttributionRequired && !String.IsNullOrEmpty(SelectedTheme.Attribution))
		{
			<div class="alert alert-info mb-4" role="alert">
				@((MarkupString)SelectedTheme.Attribution)
			</div>
		}
	</form>
</div>



@code {

	[Parameter] public IEnumerable<IThemeData>? Themes { get; set; }
	[Parameter] public string? SelectedThemeId { get; set; }
	[Parameter] public EventCallback<GameSettings> OnSubmitClick { get; set; }
	[Parameter] public int TileCount { get; set; }
	[Parameter] public bool ShowTileNumber { get; set; } = true;

	private IThemeData? SelectedTheme { get; set; }

	protected override void OnInitialized()
	{
		Themes = Themes ?? themeService.ThemeDatas;
		SelectedThemeId = SelectedThemeId ?? themeService!.ThemeConfig!.DefaultTheme;
		TileCount = TileCount == 0 ? themeService!.ThemeConfig!.DefaultTileCount : TileCount;
		SelectedTheme = Themes?.FirstOrDefault(x => x.ThemeId == SelectedThemeId);
	}


	private async Task HandleSubmitClick()
	{
		var gameSettings = new GameSettings(TileCount, SelectedTheme!, ShowTileNumber);
		await OnSubmitClick.InvokeAsync(gameSettings);
	}

	private void HandleThemeChange(ChangeEventArgs e)
	{
		SelectedThemeId = e.Value?.ToString();
		SelectedTheme = Themes?.FirstOrDefault(x => x.ThemeId == SelectedThemeId);
	}

}
