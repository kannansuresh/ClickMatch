@inject IJSRuntime jsRuntime
@inject SessionStorageService sessionStorageService
@inject NavigationManager navigationManager
@inject AuthenticationService authenticationService

<div class="modal" tabindex="-1" id="@ModalId">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body d-flex flex-column justify-content-center align-items-center">
                <div class="mb-4 text-center">
                    <h4>Login to @(Profile.Name)'s profile</h4>
                </div>
                <div class="mb-4">
                    <_UserProfileCard Profile="Profile" ShowHoverEffect=false />
                </div>
                <div class="w-75">
                    <EditForm Model="@LoginRequest" OnValidSubmit="ValidatePassword">
                        <DataAnnotationsValidator />
                        <AntiforgeryToken />
                        <div class="@(GuestUser ? "visually-hidden" : "")">
                            <p>Enter profile password to login.</p>
                            <div class="form-floating mb-3">
                                <InputText type="password" class="form-control" id="@PasswordInputId" placeholder="Profile Password" @bind-Value=@LoginRequest!.Password @ref="inputPassword" />
                                <label for="@PasswordInputId">Password</label>
                                <ValidationMessage For="() => LoginRequest.Password" />
                                @if (!string.IsNullOrEmpty(PasswordValidationMessage))
                                {
                                    <div class="validation-message">@PasswordValidationMessage</div>
                                }
                            </div>
                        </div>
                        <div class="d-flex gap-3 justify-content-center">
                            <button type="submit" class="btn btn-success" @onclick=ValidatePassword>Login</button>
                            <button type="button" class="btn btn-secondary" @onclick=@CloseModal>Close</button>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter, EditorRequired] public UserDto Profile { get; set; } = null!;
    [Parameter] public EventCallback<UserDto> OnUserLogin { get; set; }

    private bool GuestUser => Profile.UserName == UiStrings.GuestUserName;

    InputText? inputPassword;

    private string ModalId => "login-profile-modal" + Profile.Id;
    private string PasswordInputId => "login-password" + Profile.Id;

    private string PasswordValidationMessage { get; set; } = string.Empty;

    private ProfileLoginRequest? LoginRequest { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await InitiateProfileLogin();
    }

    private async Task InitiateProfileLogin()
    {
        PasswordValidationMessage = string.Empty;
        LoginRequest = new ProfileLoginRequest(sessionStorageService);
        if (GuestUser)
        {
            LoginRequest.Password = UiStrings.GuestUserPassword;
        }
        if (inputPassword is not null && inputPassword.Element.HasValue)
        {
            await inputPassword.Element.Value.FocusAsync();
        }
    }


    private async Task ValidatePassword()
    {
        var profileLoggedIn = await LoginRequest!.LoginProfile(Profile);
        PasswordValidationMessage = LoginRequest?.ErrorMessage ?? "";
        if (profileLoggedIn)
        {
            await LoginUser();
            authenticationService.Login();
        }
        StateHasChanged();
    }

    private async Task LoginUser()
    {
        await CloseModal();
        await OnUserLogin.InvokeAsync(Profile);
    }

    private async Task CloseModal()
    {
        await jsRuntime.InvokeVoidAsync("closeModal", ModalId);
    }

}
