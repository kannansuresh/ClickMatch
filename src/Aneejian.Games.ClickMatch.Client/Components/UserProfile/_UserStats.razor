@inject IndexedDbService indexedDbService
@inject AuthenticationService authenticationService

<div>
	@if (UserStats is null)
	{
		<div>
			Loading...
		</div>
	}
	else if (UserStats.Count() == 0)
	{
		<div>
			Play at least one game to see the stats.
		</div>
	}
	else
	{
		<table class="table table-hover table-bordered text-center">
			<caption>@StatsCaption</caption>
			<thead>
				<tr>
					<th class="fw-medium">Level</th>
					<th class="fw-medium">Times Played</th>
					<th class="fw-medium">Times Won</th>
					<th class="fw-medium">Times Lost</th>
					<th class="fw-medium">Times Abandoned</th>
					<th class="fw-medium">Best Score</th>
				</tr>
			</thead>
			<tbody>
				@foreach (LevelDTO level in UserStats)
				{
					<tr>
						<td>@level.Level</td>
						<td>@level.TimesPlayed</td>
						<td>@level.TimesWon</td>
						<td>@level.TimesLost</td>
						<td>@level.TimesAbandoned</td>
						<td>@level.HighScore</td>
					</tr>
				}

			</tbody>
		</table>
	}
</div>


@code {
	private int UserId { get; set; }
	private IEnumerable<LevelDTO>? UserStats { get; set; }
	private string StatsCaption {get; set; } = "Your game stats.";

	protected override async Task OnInitializedAsync()
	{
		var isSessionAuthenticated = await authenticationService.IsSessionAuthenticated();
		CheckLogin(isSessionAuthenticated);
		UserStats = await indexedDbService.GetUserStats(UserId);
		UserStats = UserStats.OrderByDescending(x => x.Level);
	}

	private void CheckLogin(bool isAuthenticated)
	{
		if (!isAuthenticated)
		{
			UserId = 0;
			return;
		}
		var autheticatedUser = authenticationService.AuthenticatedUser;
		UserId =  autheticatedUser?.Id ?? 0;
		StatsCaption = $"Stats of user {autheticatedUser?.Name} ({autheticatedUser?.UserName})";
		StateHasChanged(); // This is necessary to re-render the component
	}
}
