@inject IThemeService themeService
@inject IJSRuntime jsRuntime


@if (Avatars is not null)
{
	<div class="images-container m-4">
		@foreach (var avatar in Avatars)
		{
			<div class="image" @onclick="() => SelectAvatar(avatar)">
				<img src="@avatar" alt="avatar" />
			</div>
		}

		<div class="image no-hover" data-bs-toggle="tooltip" data-bs-placement="top"
			 data-bs-title="Click to get another set of avatars." @onclick=@GetRandomAvatars>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
				<path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
				<path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
			</svg>
		</div>
	</div>
}


@code {

	[Parameter] public EventCallback<string> OnAvatarSelected { get; set; }

	private string avatarTheme = "animal_avatars_circular";
	private IEnumerable<string>? Avatars { get; set; }


	protected override void OnInitialized()
	{
		GetRandomAvatars();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SelectAvatar(Avatars?.ElementAtOrDefault(Random.Shared.Next(Avatars.Count())) ?? "");
			await jsRuntime.InvokeVoidAsync("enableToolTip");
		}
	}

	private void GetRandomAvatars()
	{
		var themes = themeService.ThemeDatas;
		var selectedTheme = themeService.ThemeDatas?.FirstOrDefault(x => x.ThemeId == avatarTheme);
		IEnumerable<string> images = selectedTheme!.GetItems(5);
		Avatars = images;
	}

	private async Task SelectAvatar(string avatar)
	{
		await OnAvatarSelected.InvokeAsync(avatar);
	}
}
