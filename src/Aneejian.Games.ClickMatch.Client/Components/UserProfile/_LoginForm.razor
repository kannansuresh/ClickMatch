@using Aneejian.Games.ClickMatch.Services.Authentication
@inject AuthenticationService authenticationService

<div class="container w-100 d-flex justify-content-center" style="max-width: 500px">
	<EditForm EditContext="@LoginContext" class="w-100" OnSubmit="Login">
		<DataAnnotationsValidator />
		<div class="form-floating mb-3 @UserNameClass">
			<InputText class="form-control" autocomplete="off" id="userName" type="text" placeholder="User Name" @bind-Value=LoginRequest!.UserName />
			<label for="userName">User Name</label>
			<ValidationMessage For="() => LoginRequest.UserName" />
		</div>
		<div class="form-floating mb-3 @PasswordClass">
			<InputText class="form-control" id="password" type="password" placeholder="Password" @bind-Value=LoginRequest!.Password />
			<label for="password">Password</label>
			<ValidationMessage For="() => LoginRequest.Password" />
		</div>
		<div class="d-flex gap-3 justify-content-center">
			<button class="btn btn-md btn-success w-25" type="submit">Login</button>
			@if (ShowLoginAsGuest)
			{
				<a class="btn btn-md btn-outline-secondary" @onclick=LoginAsGuest>Login as Guest</a>
			}
			@if (ShowCloseButton)
			{
				<button type="button" class="btn btn-secondary" @onclick=@OnCloseButtonClick>Close</button>
			}
		</div>
	</EditForm>
</div>

@code {

	[Parameter] public string? InputUserName { get; set; } = string.Empty;
	[Parameter] public string? InputPassword { get; set; } = string.Empty;
	[Parameter] public bool ShowLoginAsGuest { get; set; } = true;
	[Parameter] public bool ShowCloseButton { get; set; } = false;
	[Parameter] public EventCallback OnCloseButtonClick { get; set; }
	[Parameter] public EventCallback OnLoginSuccess { get; set; }

	private LoginRequest? LoginRequest { get; set; }
	private EditContext? LoginContext { get; set; }
	private ValidationMessageStore? MessageStore { get; set; }

	private string ErrorMessage { get; set; } = string.Empty;

	private const string _invisibleClass = "visually-hidden";
	private string UserNameClass { get; set; } = string.Empty;
	private string PasswordClass { get; set; } = string.Empty;

	protected override void OnInitialized()
	{
		LoginRequest = new LoginRequest();
		if (!string.IsNullOrEmpty(InputUserName))
		{
			LoginRequest.UserName = InputUserName;
			UserNameClass = _invisibleClass;
		}
		if (!string.IsNullOrEmpty(InputPassword))
		{
			LoginRequest.Password = InputPassword;
			PasswordClass = _invisibleClass;
		}
		LoginContext = new EditContext(LoginRequest);
		MessageStore = new ValidationMessageStore(LoginContext);
	}

	private async Task Login()
	{
		var validForm = LoginContext!.Validate();
		if (!validForm)
			CheckForValidationErrors();
		var loginResult = await authenticationService.Login(LoginRequest!.UserName, LoginRequest!.Password);
		ErrorMessage = authenticationService.AuthenticationErrorMessage;
		if (!loginResult)
		{
			CheckForValidationErrors();
		}
		else
		{
			ErrorMessage = string.Empty;
			MessageStore!.Clear();
			LoginContext!.NotifyValidationStateChanged();
			await OnLoginSuccess.InvokeAsync();
		}
		Console.WriteLine($"Login Result: {loginResult}, Error Message: {ErrorMessage}");
	}

	private async Task LoginAsGuest()
	{
		LoginRequest!.UserName = AppStrings.GuestUser.UserName;
		LoginRequest!.Password = AppStrings.GuestUser.Password;
		await Login();
	}

	private void CheckForValidationErrors()
	{
		MessageStore!.Clear();

		if (ErrorMessage.Contains("User"))
			MessageStore.Add(() => LoginRequest!.UserName, ErrorMessage);

		if (ErrorMessage.Contains("Password"))
			MessageStore.Add(() => LoginRequest!.Password, ErrorMessage);

		LoginContext!.NotifyValidationStateChanged();
	}

}