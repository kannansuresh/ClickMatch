@using Aneejian.Games.ClickMatch.Services.Authentication
@inject AuthenticationService authenticationService
@inject IJSRuntime JSRuntime

<div class="container w-100 d-flex justify-content-center"
	 style="max-width: 31.25rem">
	<EditForm EditContext="@LoginContext"
			  class="w-100"
			  OnSubmit="Login">
		<DataAnnotationsValidator />
		<AntiforgeryToken />

		@if (ShowUserName)
		{
			<div class="form-floating mb-3">
				<InputText class="form-control"
						   autocomplete="off"
						   id="@UserNameId"
						   type="text"
						   placeholder="User Name"
						   autofocus
						   @bind-Value=LoginRequest!.UserName />
				<label for="@UserNameId">User Name</label>
				<ValidationMessage For="() => LoginRequest.UserName" />
			</div>
		}

		@if (ShowPassword)
		{
			<div class="form-floating mb-3">
				<InputText class="form-control"
						   id="@PasswordId"
						   type="Password"
						   placeholder="Password"
						   autofocus
						   @bind-Value=LoginRequest!.Password />
				<label for="@PasswordId">Password</label>
				<ValidationMessage For="() => LoginRequest.Password" />
			</div>
		}
		<div class="d-flex gap-3 justify-content-center">
			<button class="btn btn-md btn-success w-25"
					type="submit">
				Login
			</button>
			@if (ShowLoginAsGuest)
			{
				<a class="btn btn-md btn-outline-secondary"
				   @onclick=LoginAsGuest>Login as Guest</a>
			}
			@if (ShowCloseButton)
			{
				<button type="button"
						class="btn btn-secondary"
						@onclick=@OnCloseButtonClick>
					Close
				</button>
			}
		</div>
	</EditForm>
</div>

@code {

	[Parameter] public string? InputUserName { get; set; } = string.Empty;
	[Parameter] public string? InputPassword { get; set; } = string.Empty;
	[Parameter] public bool ShowLoginAsGuest { get; set; } = true;
	[Parameter] public bool ShowCloseButton { get; set; } = false;
	[Parameter] public EventCallback OnCloseButtonClick { get; set; }
	[Parameter] public EventCallback OnLoginSuccess { get; set; }


	private LoginRequest? LoginRequest { get; set; }
	private EditContext? LoginContext { get; set; }
	private ValidationMessageStore? MessageStore { get; set; }

	private string ErrorMessage { get; set; } = string.Empty;

	private string _elementId = Guid.NewGuid().ToString();
	string UserNameId => "userName" + _elementId;
	string PasswordId => "password" + _elementId;

	private bool ShowUserName { get; set; } = true;
	private bool ShowPassword { get; set; } = true;

	protected override void OnInitialized()
	{
		LoginRequest = new LoginRequest();
		if (!string.IsNullOrEmpty(InputUserName))
		{
			LoginRequest.UserName = InputUserName;
			ShowUserName = false;
		}
		if (!string.IsNullOrEmpty(InputPassword))
		{
			LoginRequest.Password = InputPassword;
			ShowPassword = false;
		}
		LoginContext = new EditContext(LoginRequest);
		MessageStore = new ValidationMessageStore(LoginContext);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (ShowUserName)
				await Focus(UserNameId);
			else if (ShowPassword)
				await Focus(PasswordId);
		}
	}

	private async Task Login()
	{
		var validForm = LoginContext!.Validate();
		if (!validForm)
			CheckForValidationErrors();
		var loginResult = await authenticationService.Login(LoginRequest!.UserName, LoginRequest!.Password);
		ErrorMessage = authenticationService.AuthenticationErrorMessage;
		if (!loginResult)
		{
			CheckForValidationErrors();
		}
		else
		{
			ErrorMessage = string.Empty;
			MessageStore!.Clear();
			LoginContext!.NotifyValidationStateChanged();
			await OnLoginSuccess.InvokeAsync();
		}
		System.Diagnostics.Debug.WriteLine($"Login Result: {loginResult}, Error Message: {ErrorMessage}");
	}

	private async Task LoginAsGuest()
	{
		LoginRequest!.UserName = AppStrings.GuestUser.UserName;
		LoginRequest!.Password = AppStrings.GuestUser.Password;
		await Login();
	}

	private void CheckForValidationErrors()
	{
		MessageStore!.Clear();

		if (ErrorMessage.Contains("User"))
			MessageStore.Add(() => LoginRequest!.UserName, ErrorMessage);

		if (ErrorMessage.Contains("Password"))
			MessageStore.Add(() => LoginRequest!.Password, ErrorMessage);

		LoginContext!.NotifyValidationStateChanged();
	}

	public async Task Focus(string elementId)
	{
		await JSRuntime.InvokeVoidAsync("focusElementById", elementId);
	}

}