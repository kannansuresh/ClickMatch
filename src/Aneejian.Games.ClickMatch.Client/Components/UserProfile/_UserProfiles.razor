@using Aneejian.Games.ClickMatch.Security
@inject IJSRuntime jsRuntime
@inject IndexedDbService iDb
@inject NavigationManager navigationManager


<div class="text-center mb-5">
	<h1 class="display-5">Who is playing?</h1>
</div>

<div class="profiles-container">

	@if (Profiles is not null)
	{
		@foreach (var profile in Profiles)
		{
			<_UserProfileCard Profile=profile OnUserSelected=SelectUser OnUserDeleted=DeleteUser />
		}
	}


</div>

@code {
	private List<UserDto>? Profiles { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await FetchProfiles();
	}

	private async Task FetchProfiles()
	{
		var profiles = await iDb.GetUsers();


		if (profiles.Count() == 0)
		{
			var guestUserDto = new UserDto
				{
					UserName = UiStrings.GuestUserName,
					Name = UiStrings.GuestUserDisplayName,
					Password = PasswordManager.HashPassword(UiStrings.GuestUserPassword),
					Avatar = UiStrings.GuestUserAvatar
				};
			await iDb.AddNewUser(guestUserDto);
		}

		profiles = await iDb.GetUsers();

		if (Profiles is not null)
			Profiles.Clear();
		else
			Profiles = new List<UserDto>();

		Profiles.AddRange(profiles);

		var addUserDto = new UserDto
			{
				UserName = UiStrings.NewUserUserName,
				Name = UiStrings.NewUserDisplayName,
			};

		Profiles.Add(addUserDto);
	}

	private void SelectUser(UserDto user)
	{
		if (user.UserName == UiStrings.NewUserUserName)
		{
			navigationManager.NavigateTo("adduser");
		}
		else
		{
			navigationManager.NavigateTo("/");
		}
	}

	private async Task DeleteUser(UserDto user)
	{

		if (user.UserName == UiStrings.NewUserUserName)
		{
			return;
		}
		await FetchProfiles();

	}
}
