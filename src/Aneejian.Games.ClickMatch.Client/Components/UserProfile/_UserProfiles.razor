@using Aneejian.Games.ClickMatch.Security
@inject IJSRuntime jsRuntime
@inject IndexedDbService iDb
@inject NavigationManager navigationManager


<div class="text-center mb-5">
	<h1 class="display-5">Who is playing?</h1>
</div>

<div class="profiles-container">

	@if (Profiles is not null)
	{
		@foreach (var profile in Profiles)
		{
			<_UserProfileCard Profile=profile OnUserSelected=SelectUser OnUserDeleted=DeleteUser />
		}
	}


</div>

@code {
	private List<UserDto>? Profiles { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Profiles = new();
		var profiles = await iDb.GetUsers();

		Profiles.AddRange(profiles);

		if (profiles.Count() == 0)
		{
			var guestUserDto = new UserDto
				{
					UserName = UiStrings.GuestUserName,
					Name = UiStrings.GuestUserDisplayName,
					Password = PasswordManager.HashPassword(UiStrings.GuestUserPassword),
					Avatar = UiStrings.GuestUserAvatar
				};
			await iDb.AddNewUser(guestUserDto);
			Profiles.Add(guestUserDto);
		}


		var addUserDto = new UserDto
			{
				UserName = UiStrings.NewUserUserName,
				Name = UiStrings.NewUserDisplayName,
			};

		Profiles.Add(addUserDto);
	}

	private async Task SelectUser(UserDto user)
	{

		if (user.UserName == UiStrings.NewUserUserName)
		{
			navigationManager.NavigateTo("adduser");
		}

		await jsRuntime.InvokeVoidAsync("console.log", user);
	}

	private void DeleteUser(UserDto user)
	{

		if (user.UserName == UiStrings.NewUserUserName)
		{
			return;
		}
		Profiles!.Remove(user);
	}
}
