@using System.ComponentModel.DataAnnotations
@using Aneejian.Games.ClickMatch.Helpers
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime jsRuntime


@if (Profile is not null)
{
	<div class="profile @hoverClass" @onclick=CheckUserToLogin>
		<div class="profile-image">
			@if (Profile.UserName == AppStrings.NewUser.UserName)
			{
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
					<path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
				</svg>
			}
			else
			{
				if (!string.IsNullOrEmpty(Profile.Avatar))
				{
					<picture>
						<source srcset="@(SharedMethods.WebpProfileImage(Profile))" type="image/webp">
						<source srcset="@Profile.Avatar" type="image/jpeg">
						<img src="@Profile.Avatar" alt="Tile-@Profile.UserName" />
					</picture>
				}
			}
		</div>
		<div class="profile-info @(ShowProfileInfo ? "" : "visually-hidden")">
			<div class="profile-name text-wrap">@(Profile.Name == "" ? "___" : Profile.Name)</div>
			<div class="profile-user-name text-wrap text-info">@(Profile.UserName == "" ? "___" : $"{Profile.UserName}")</div>
		</div>
	</div>

	@if (OnUserSelected.HasDelegate)
	{
		<_Login Profile=Profile OnUserLogin=SelectUser />
	}
}

@code {
	[Parameter] public UserDto Profile { get; set; } = null!;

	[Parameter] public bool ShowHoverEffect { get; set; } = true;

	[Parameter] public bool ShowProfileInfo { get; set; } = true;

	[Parameter] public EventCallback<UserDto> OnUserSelected { get; set; }

	[Parameter] public EventCallback<UserDto> OnUserDeleted { get; set; }

	private string LoginModalId => "login-profile-modal" + Profile.Id;

	private string hoverClass => ShowHoverEffect ? "profile-hover" : "";

	private async Task SelectUser()
	{
		await OnUserSelected.InvokeAsync(Profile);
	}


	private async Task DeleteUser()
	{
		await OnUserDeleted.InvokeAsync(Profile);
	}

	private async Task CheckUserToLogin()
	{
		if (Profile.UserName == AppStrings.NewUser.UserName)
		{
			await SelectUser();
		}
		else
		{
			await OpenLoginModal();
		}
	}

	private async Task OpenLoginModal()
	{
		await jsRuntime.InvokeVoidAsync("openModal", LoginModalId);
	}
}
