@using System.ComponentModel.DataAnnotations
@inject IndexedDbService iDb
@inject IJSRuntime jsRuntime


@if (Profile is not null)
{
	<div class="profile @hoverClass" @onclick=SelectUser>
		<div class="profile-image">
			@if (Profile.UserName == UiStrings.NewUserUserName)
			{
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
					<path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
				</svg>
			}
			else
			{
				if (!string.IsNullOrEmpty(Profile.Avatar))
				{
					<img src="@Profile.Avatar" alt="" loading="lazy" />
				}
			}
		</div>
		<div class="profile-info">
			<div class="profile-name text-wrap">@(Profile.Name == "" ? "___" : Profile.Name)</div>
			<div class="profile-user-name text-wrap text-info">@(Profile.UserName == "" ? "___" : $"{Profile.UserName}")</div>
		</div>
		@if (OnUserDeleted.HasDelegate && Profile.UserName != UiStrings.NewUserUserName && Profile.UserName != UiStrings.GuestUserName)
		{
			<div class="profile-delete" data-bs-toggle="modal" data-bs-target="#@ModalId" @onclick=InitiateProfileDeletion>
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
					<path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
				</svg>
			</div>
		}
	</div>

	@if (OnUserDeleted.HasDelegate && Profile.UserName != UiStrings.NewUserUserName && Profile.UserName != UiStrings.GuestUserName)
	{
		<div class="modal" tabindex="-1" id="@ModalId">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Delete Profile @(Profile.UserName)?</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body d-flex flex-column justify-content-center align-items-center">
						<div class="mb-4">
							<_UserProfileCard Profile="Profile" ShowHoverEffect=false />
						</div>
						<div class="">
							<EditForm Model="@DeleteRequest" OnValidSubmit="ValidateConfirmationPassword">
								<DataAnnotationsValidator />
								<AntiforgeryToken />
								<p>Enter profile password to confirm profile deletion.</p>
								<div class="form-floating mb-3">
									<input type="password" class="form-control" id="password" placeholder="Profile Password" @bind=@DeleteRequest!.ConfirmationPassword>
									<label for="password">Password</label>
									<ValidationMessage For="() => DeleteRequest.ConfirmationPassword" />
									@if (!string.IsNullOrEmpty(PasswordValidationMessage))
									{
										<div class="validation-message">@PasswordValidationMessage</div>
									}
								</div>
								<div class="d-grid justify-content-end">
									<button type="submit" class="btn btn-danger btn-sm" @onclick=ValidateConfirmationPassword>Delete Profle</button>
								</div>
							</EditForm>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
					</div>
				</div>
			</div>
		</div>
	}
}

<_Splasher SplashText=@SplashMessage Delay="2000"/>


@code {
	[Parameter] public UserDto Profile { get; set; } = null!;

	[Parameter] public bool ShowHoverEffect { get; set; } = true;

	[Parameter] public EventCallback<UserDto> OnUserSelected { get; set; }

	[Parameter] public EventCallback<UserDto> OnUserDeleted { get; set; }

	private string SplashMessage { get; set; } = string.Empty;

	private ProfileDeleteRequest? DeleteRequest { get; set; }

	private string ModalId => "delete-profile-modal" + Profile.Id;

	private string PasswordValidationMessage { get; set; } = string.Empty;

	private string hoverClass => ShowHoverEffect ? "profile-hover" : "";

	private async Task SelectUser()
	{
		await OnUserSelected.InvokeAsync(Profile);
	}

	private async Task DeleteUser()
	{
		await OnUserDeleted.InvokeAsync(Profile);

	}

	protected override void OnInitialized()
	{
		InitiateProfileDeletion();
		base.OnInitialized();
	}

	private void InitiateProfileDeletion()
	{
		PasswordValidationMessage = string.Empty;
		DeleteRequest = new ProfileDeleteRequest(iDb);
	}

	private async Task ValidateConfirmationPassword()
	{
		var profileDeleted = await DeleteRequest!.DeleteProfile(Profile);
		PasswordValidationMessage = DeleteRequest?.ErrorMessage ?? "";
		if (profileDeleted)
		{
			await jsRuntime.InvokeVoidAsync("closeModal", ModalId);
			await DeleteUser();
			SplashMessage = $"Profile deleted successfully.";
		}
		StateHasChanged();
	}
}
