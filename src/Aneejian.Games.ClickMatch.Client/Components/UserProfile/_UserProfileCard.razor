@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime jsRuntime


@if (Profile is not null)
{
    <div class="profile @hoverClass" @onclick=CheckUserToLogin>
        <div class="profile-image">
            @if (Profile.UserName == AppStrings.NewUserUserName)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                </svg>
            }
            else
            {
                if (!string.IsNullOrEmpty(Profile.Avatar))
                {
                    <img src="@Profile.Avatar" alt="@Profile.UserName" />
                }
            }
        </div>
        <div class="profile-info">
            <div class="profile-name text-wrap">@(Profile.Name == "" ? "___" : Profile.Name)</div>
            <div class="profile-user-name text-wrap text-info">@(Profile.UserName == "" ? "___" : $"{Profile.UserName}")</div>
        </div>
        @if (OnUserDeleted.HasDelegate && Profile.UserName != AppStrings.NewUserUserName && Profile.UserName != AppStrings.GuestUserName)
        {
            <div class="profile-delete" @onclick=OpenDeleteModal>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                </svg>
            </div>
        }
    </div>

    @if (OnUserDeleted.HasDelegate && Profile.UserName != AppStrings.NewUserUserName && Profile.UserName != AppStrings.GuestUserName)
    {
        <_DeleteUser Profile=Profile OnUserDeleted=DeleteUser />
    }

    @if (OnUserSelected.HasDelegate)
    {
        <_Login Profile=Profile OnUserLogin=SelectUser />
    }
}

@code {
    [Parameter] public UserDto Profile { get; set; } = null!;

    [Parameter] public bool ShowHoverEffect { get; set; } = true;

    [Parameter] public EventCallback<UserDto> OnUserSelected { get; set; }

    [Parameter] public EventCallback<UserDto> OnUserDeleted { get; set; }

    private bool IgnoreLoginClick { get; set; } = false;
    private string LoginModalId => "login-profile-modal" + Profile.Id;
    private string DeleteModalId => "delete-profile-modal" + Profile.Id;

    private string hoverClass => ShowHoverEffect ? "profile-hover" : "";

    private async Task SelectUser()
    {
        await OnUserSelected.InvokeAsync(Profile);
    }

    private async Task DeleteUser()
    {
        await OnUserDeleted.InvokeAsync(Profile);
    }

    private async Task CheckUserToLogin()
    {
        if (IgnoreLoginClick)
        {
            IgnoreLoginClick = false;
            return;
        }
        if (Profile.UserName == AppStrings.NewUserUserName)
        {
            await SelectUser();
        }
        else
        {
            await OpenLoginModal();
        }
    }

    private async Task OpenLoginModal()
    {
        await jsRuntime.InvokeVoidAsync("openModal", LoginModalId);
    }

    private async Task OpenDeleteModal(MouseEventArgs e)
    {
        IgnoreLoginClick = true;
        await jsRuntime.InvokeVoidAsync("openModal", DeleteModalId);
    }
}
