@using Aneejian.Games.ClickMatch.Helpers
@using Aneejian.Games.ClickMatch.Security
@inject IndexedDbService iDb
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<div class="text-center d-flex justify-content-center align-items-center flex-column">
	@if (AddedUser is not null)
	{
		<_SubHeading>Welcome @AddedUser.Name</_SubHeading>
		<div class="row row-cols-1 text-center d-flex justify-content-center align-items-center">
			<div class="col mb-4"
				 style="width:fit-content">
				<_UserProfileCard Profile=AddedUser
								  OnUserSelected="OnUserSelect" />
			</div>
			<div class="col text-info text-center">
				Click your profile card to continue.
			</div>
		</div>
	}
	else
	{
		<_SubHeading>Create New User Profile</_SubHeading>
		<div class="row g-4" style="width:95vw; max-width:100ch">
			<div class="col-sm-4 ms-auto me-auto me-sm-0 ms-sm-0"
				 style="max-width:fit-content;">
				<_UserProfileCard Profile=RegisterRequest
								  ShowProfileInfo=true
								  ShowHoverEffect=ShowHoverEffect />
			</div>
			<div class="col-sm-8 mb-4 text-start">
				<EditForm EditContext=RegisterRequestContext
						  id="contactForm"
						  OnValidSubmit="HandleSubmit">
					<DataAnnotationsValidator />
					<ValidationSummary class="list-unstyled" />
					<AntiforgeryToken />
					<div class="row g-3">
						<div class="col-sm-6">
							<div class="form-floating mb-3">
								<InputText class="form-control"
										   id="userName"
										   autofocus
										   type="text"
										   placeholder="User Name"
										   @oninput="CheckUserNameAvailability"
										   @bind-Value=RegisterRequest!.UserName
										   autocomplete="off"
										   maxlength="20" />
								<label for="userName">User Name</label>
								<ValidationMessage For="() => RegisterRequest!.UserName" />
							</div>
						</div>
						<div class="col-sm-6">
							<div class="form-floating mb-3">
								<InputText class="form-control"
										   id="displayName"
										   type="text"
										   placeholder="Display Name"
										   @bind-Value=RegisterRequest!.Name
										   autocomplete="off"
										   maxlength="20"
										   @oninput=SetDisplayName />
								<label for="displayName">Display Name</label>
								<ValidationMessage For="() => RegisterRequest!.Name" />
							</div>
						</div>
					</div>

					<div class="form-floating mb-3">
						<InputText class="form-control"
								   id="avatar"
								   type="avatar"
								   placeholder="Select an Avatar"
								   @bind-Value=RegisterRequest!.Avatar
								   autocomplete="off" />
						<label for="avatar">Avatar</label>
						<div id="avatarHelpBlock"
							 class="form-text">
							Select an avatar from below or enter a URL to use your own avatar.
						</div>
						<ValidationMessage For="() => RegisterRequest!.Avatar" />
						<_AvatarSelector OnAvatarSelected="OnAvatarSelected" />
					</div>
					<div class="row g-3">
						<div class="col-sm-6">
							<div class="form-floating mb-3">
								<InputText class="form-control"
										   id="password"
										   type="password"
										   placeholder="Password"
										   @bind-Value=RegisterRequest!.InputPassword />
								<label for="password">Password</label>
								<ValidationMessage For="() => RegisterRequest!.InputPassword" />
							</div>
						</div>
						<div class="col-sm-6">
							<div class="form-floating mb-3">
								<InputText class="form-control"
										   id="confirmPassword"
										   type="password"
										   placeholder="Confirm Password"
										   @bind-Value="RegisterRequest!.ConfirmPassword" />
								<label for="confirmPassword">Confirm Password</label>
								<ValidationMessage For="() => RegisterRequest!.ConfirmPassword" />
							</div>
						</div>
					</div>
					<div class="d-grid">
						<button class="btn btn-primary"
								id="submitButton"
								type="submit">
							Submit
						</button>
					</div>
				</EditForm>
			</div>
		</div>
	}
</div>

@code {

	private RegisterRequest? RegisterRequest { get; set; }
	private EditContext? RegisterRequestContext { get; set; }
	private ValidationMessageStore? MessageStore { get; set; }

	private bool ShowHoverEffect { get; set; } = false;

	private UserDto? AddedUser { get; set; }

	protected override void OnInitialized()
	{
		RegisterRequest = new RegisterRequest();
		// setting up a dummy password as password is required for the form to be valid.
		RegisterRequest.Password = "dummyPassword";
		RegisterRequestContext = new EditContext(RegisterRequest);
		MessageStore = new ValidationMessageStore(RegisterRequestContext);
		base.OnInitialized();
	}

	private void OnUserSelect()
	{
		navigationManager.NavigateTo(AppStrings.Pages.Home);
	}

	private async Task CheckUserNameAvailability(ChangeEventArgs e)
	{
		var userName = e.Value?.ToString()?.Trim() ?? "";
		userName = string.Join("", userName.ToCharArray().Where(c => char.IsLetterOrDigit(c) || c == '_'));
		if (string.IsNullOrEmpty(userName)) return;
		try
		{
			var userExist = await iDb.UserExists(userName);
			if (userExist)
			{
				MessageStore!.Clear();
				MessageStore!.Add(() => RegisterRequest!.UserName, "User name not available.");
			}
			else
			{
				MessageStore!.Clear();
			}
			RegisterRequestContext!.NotifyValidationStateChanged();
		}
		catch (Exception ex)
		{
			SharedMethods.Log(ex.Message);
		}

		e.Value = userName;
		RegisterRequest!.UserName = userName;
	}

	private void SetDisplayName(ChangeEventArgs e)
	{
		var displayName = e.Value?.ToString()?.Trim() ?? "";
		if (string.IsNullOrEmpty(displayName)) return;
		e.Value = displayName;
		RegisterRequest!.Name = displayName;
	}


	private async Task HandleSubmit(EditContext editContext)
	{
		RegisterRequest!.Password = RegisterRequest.InputPassword;
		var userId = await iDb.AddNewUser(RegisterRequest);
		AddedUser = await iDb.GetUser(userId);
		RegisterRequest = new RegisterRequest();
		ShowHoverEffect = true;
	}

	private void OnAvatarSelected(string avatar)
	{
		RegisterRequest!.Avatar = avatar;
	}

}
