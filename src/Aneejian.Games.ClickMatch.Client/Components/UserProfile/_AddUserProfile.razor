@using Aneejian.Games.ClickMatch.Security
@inject IndexedDbService iDb
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<div class="text-center d-flex justify-content-center align-items-center flex-column">
	@if (AddedUser is not null)
	{
		<h1 class="mb-4 display-6">Welcome @AddedUser.Name</h1>
		<div class="row row-cols-1 text-center d-flex justify-content-center align-items-center">
			<div class="col mb-4" style="width:fit-content">
				<_UserProfileCard Profile=AddedUser OnUserSelected="OnUserSelect" />
			</div>
			<div class="col text-info text-center">
				Click your profile card to continue.
			</div>
		</div>
	}
	else
	{
		<h3 class="h1 display-5 mt-5">Create New User Profile</h3>
		<div class="d-flex flex-column align-items-center justify-content-center p-5 pb-3 w-75">
			<div class="col mb-4 ms-0 me-2 align-items-center justify-content-center" style="max-width:fit-content;">
				<_UserProfileCard Profile=RegisterRequest ShowProfileInfo=true ShowHoverEffect=ShowHoverEffect />
			</div>
			<div class="col mb-4 text-start" style="min-width:60vmin;">
				<EditForm EditContext=RegisterRequestContext id="contactForm" OnValidSubmit="HandleSubmit">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<AntiforgeryToken />
					<div class="form-floating mb-3">
						<InputText class="form-control" id="userName" type="text" placeholder="User Name" @oninput="CheckUserNameAvailability" @bind-Value=RegisterRequest!.UserName autocomplete="off" maxlength="20" />
						<label for="userName">User Name</label>
						<ValidationMessage For="() => RegisterRequest!.UserName" />
					</div>
					<div class="form-floating mb-3">
						<InputText class="form-control" id="displayName" type="text" placeholder="Display Name" @bind-Value=RegisterRequest!.Name autocomplete="off" maxlength="20" @oninput=SetDisplayName />
						<label for="displayName">Display Name</label>
						<ValidationMessage For="() => RegisterRequest!.Name" />
					</div>

					<div class="form-floating mb-3">
						<InputText class="form-control" id="avatar" type="avatar" placeholder="Select an Avatar" @bind-Value=RegisterRequest!.Avatar autocomplete="off" />
						<label for="avatar">Avatar</label>
						<div id="avatarHelpBlock" class="form-text">
							Select an avatar from below or enter a URL to use your own avatar.
						</div>
						<ValidationMessage For="() => RegisterRequest!.Avatar" />

						<_AvatarSelector OnAvatarSelected="OnAvatarSelected" />
					</div>

					<div class="form-floating mb-3">
						<InputText class="form-control" id="password" type="password" placeholder="Password" @bind-Value=RegisterRequest!.InputPassword />
						<label for="password">Password</label>
						<ValidationMessage For="() => RegisterRequest!.InputPassword" />
					</div>
					<div class="form-floating mb-3">
						<InputText class="form-control" id="confirmPassword" type="password" placeholder="Confirm Password" @bind-Value="RegisterRequest!.ConfirmPassword" />
						<label for="confirmPassword">Confirm Password</label>
						<ValidationMessage For="() => RegisterRequest!.ConfirmPassword" />
					</div>

					<div class="d-grid">
						<button class="btn btn-primary" id="submitButton" type="submit">Submit</button>
					</div>
				</EditForm>
			</div>
		</div>
	}
</div>


@code {

	private RegisterRequest? RegisterRequest { get; set; }
	private EditContext? RegisterRequestContext { get; set; }
	private ValidationMessageStore? MessageStore { get; set; }

	private bool ShowHoverEffect { get; set; } = false;

	private UserDto? AddedUser { get; set; }

	protected override void OnInitialized()
	{
		RegisterRequest = new RegisterRequest();
		// setting up a dummy password as password is required for the form to be valid.
		RegisterRequest.Password = "dummyPassword";
		RegisterRequestContext = new EditContext(RegisterRequest);
		MessageStore = new ValidationMessageStore(RegisterRequestContext);
		base.OnInitialized();
	}

	private void OnUserSelect()
	{
		navigationManager.NavigateTo("/");
	}

	private async Task CheckUserNameAvailability(ChangeEventArgs e)
	{
		var userName = e.Value?.ToString()?.Trim() ?? "";
		userName = string.Join("", userName.ToCharArray().Where(c => char.IsLetterOrDigit(c) || c == '_'));
		if (string.IsNullOrEmpty(userName)) return;
		try
		{
			var userExist = await iDb.UserExists(userName);
			if (userExist)
			{
				MessageStore!.Clear();
				MessageStore!.Add(() => RegisterRequest!.UserName, "User name not available.");				
			}
			else
			{
				MessageStore!.Clear();
			}
			RegisterRequestContext!.NotifyValidationStateChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

		e.Value = userName;
		RegisterRequest!.UserName = userName;
	}

	private void SetDisplayName(ChangeEventArgs e)
	{
		var displayName = e.Value?.ToString()?.Trim() ?? "";
		if (string.IsNullOrEmpty(displayName)) return;
		e.Value = displayName;
		RegisterRequest!.Name = displayName;
	}


	private async Task HandleSubmit(EditContext editContext)
	{
		RegisterRequest!.Password = RegisterRequest.InputPassword;
		var userId = await iDb.AddNewUser(RegisterRequest);
		AddedUser = await iDb.GetUser(userId);
		RegisterRequest = new RegisterRequest();
		ShowHoverEffect = true;
	}

	private async Task OnAvatarSelected(string avatar)
	{
		RegisterRequest!.Avatar = avatar;
		await InvokeAsync(StateHasChanged);
	}

}
