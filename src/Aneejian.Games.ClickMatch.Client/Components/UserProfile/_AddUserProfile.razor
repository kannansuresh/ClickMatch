@using Aneejian.Games.ClickMatch.Security
@inject IndexedDbService iDb
@inject IJSRuntime jsRuntime

<div class="d-flex flex-column min-vh-100 justify-content-center align-items-center">
	<_Branding />


	@if (AddedUser is not null)
	{
		<h3 class="mb-4 display-5">Welcome @AddedUser.Name</h3>
		<div class="row row-cols-1 text-center d-flex justify-content-center align-items-center">
			<div class="col mb-4" style="width:fit-content">
				<_UserProfileCard Profile=AddedUser />
			</div>
			<div class="col text-info text-center">
				Click your profile card to continue.
			</div>
		</div>
	}
	else
	{
		<h3 class="mb-4 display-5">Add New User Profile</h3>
		<div class="row row-cols-auto">
			<div class="col">
				<_UserProfileCard Profile=UserDataModel />
			</div>
			<div class="col" style="width:80vmin;">
				<EditForm Model=UserDataModel id="contactForm" OnValidSubmit="HandleSubmit">
					<DataAnnotationsValidator />
					<AntiforgeryToken />
					<div class="form-floating mb-3">
						<input class="form-control" id="userName" type="text" placeholder="User Name" @oninput="CheckUserNameAvailability" @bind=UserDataModel!.UserName autocomplete="off" />
						<label for="userName">User Name</label>
						<ValidationMessage For="() => UserDataModel!.UserName" />
						@if (UserNameAlreadyExist)
						{
							<div class="validation-message">User name not available.</div>
						}
					</div>
					<div class="form-floating mb-3">
						<input class="form-control" id="displayName" type="text" placeholder="Display Name" @bind=UserDataModel!.Name autocomplete="off" />
						<label for="displayName">Display Name</label>
						<ValidationMessage For="() => UserDataModel!.Name" />
					</div>

					<div class="form-floating mb-3">
						<input class="form-control" id="avatar" type="avatar" placeholder="Select an Avatar" @bind=UserDataModel!.Avatar @bind:event="oninput" />
						<label for="avatar">Avatar</label>
						<ValidationMessage For="() => UserDataModel!.Avatar" />
						<_AvatarSelector />
					</div>



					<div class="form-floating mb-3">
						<input class="form-control" id="password" type="password" placeholder="Password" @bind=UserDataModel!.Password @bind:event="oninput" />
						<label for="password">Password</label>
						<ValidationMessage For="() => UserDataModel!.Password" />
					</div>
					<div class="form-floating mb-3">
						<input class="form-control" id="confirmPassword" type="password" placeholder="Confirm Password" @bind=ConfirmPassword @bind:event="oninput" />
						<label for="confirmPassword">Confirm Password</label>
						@if (ConfirmPassword != UserDataModel!.Password)
						{
							<div class="validation-message">Passwords do not match.</div>
						}
					</div>

					<div class="d-grid">
						<button class="btn btn-primary" id="submitButton" type="submit">Submit</button>
					</div>
				</EditForm>
			</div>
		</div>
	}
</div>

<script>
	async function addHash(hashValue, id) {
		const db = iDbWrapper.db;
		db.users.update(id, { hash: hashValue });
	}
</script>

@code {
	private UserDto? UserDataModel { get; set; }

	private string ConfirmPassword { get; set; } = string.Empty;

	private bool UserNameAlreadyExist = false;

	private UserDto? AddedUser { get; set; }



	protected override void OnInitialized()
	{
		UserDataModel = new UserDto();
	}

	private async Task CheckUserNameAvailability(ChangeEventArgs e)
	{
		var userName = e.Value?.ToString()?.Trim() ?? "";
		userName = string.Join("", userName.ToCharArray().Where(c => char.IsLetterOrDigit(c) || c == '_'));
		if (string.IsNullOrEmpty(userName)) return;
		try
		{
			var userExist = await iDb.UserExists(userName);
			UserNameAlreadyExist = userExist;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

		e.Value = userName;
		UserDataModel!.UserName = userName;
	}

	private async Task HandleSubmit(EditContext editContext)
	{
		if (ConfirmPassword != UserDataModel!.Password || UserNameAlreadyExist) return;
		if (editContext.Validate() && UserDataModel is not null)
		{
			UserDataModel.Password = PasswordManager.HashPassword(UserDataModel.Password);

			var userId = await iDb.AddNewUser(UserDataModel);

			AddedUser = await iDb.GetUser(userId);

			await jsRuntime.InvokeVoidAsync("addHash", AddedUser.GetHashCode().ToString(), AddedUser);

			UserDataModel = new UserDto();
			ConfirmPassword = string.Empty;
		}
		else
		{
			Console.WriteLine("Form is invalid.");
		}
	}
}
