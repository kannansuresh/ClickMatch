@inject IThemeService themeService
@inject IJSRuntime jsRuntime
@inject GameManagerService gameManager
@implements IDisposable

<div class="d-flex flex-column justify-content-center align-items-center">
	@if (Themes is not null && !gameManager.GameInProgress && !gameManager.GameWon && !gameManager.GameLost)
	{
		<div class="col">
			<_Branding />
		</div>
		<div class="col">
			<_SettingsForm SelectedThemeId=@SelectedThemeId TileCount=@TileCount ShowTileNumber=@(gameManager.GameSettings?.ShowTileNumbers ?? true) OnSubmitClick=@OnSettingSave />
		</div>
	}
	@if (Tiles is not null && gameManager is not null && gameManager.GameInProgress)
	{
		<div class="row mb-4">
			<_TileGrid Tiles="Tiles" />
		</div>


		<_MultiplierSplash Multiplier="gameManager.GameScorer.Multiplier" />


		<div class="row mb-4 user-select-none">
			<div>@gameManager.GameScorer.ToString()</div>
		</div>

		<div class="d-flex row row-cols-auto g-2 mb-2 justify-content-center align-items-center">
			<div class="col">
				<input class="btn-check" type="checkbox" @bind=gameManager.GameSettings!.ShowTileNumbers id="showTileNumber">
				<label class="btn btn-primary btn-sm" style="min-width: 125px" for="showTileNumber">
					@(gameManager.GameSettings.ShowTileNumbers ? "Hide tile number" : "Show tile number")
				</label>
			</div>
			<div class="col">
				<button class="btn btn-danger btn-sm" @onclick=OnAbandonClick>Abandon Game</button>
			</div>
			<_DevOnly>
				<div class="col">
					<button class="btn btn-success btn-sm" @onclick=OnFilipAllClick>Flip all Tiles</button>
				</div>
			</_DevOnly>
		</div>

	}

	@if (gameManager!.GameWon || gameManager.GameLost)
	{
		<div class="d-flex flex-column justify-content-center align-items-center text-center">
			<h1 class="mb-4">@(gameManager.GameWon ? $"You cleared Level {gameManager.GameSettings!.GameLevel}!" : $"You failed to clear Level {gameManager.GameSettings!.GameLevel}")</h1>
			<h2 class="mb-4">@($"You scored {gameManager.GameScorer.TotalScore} pts")</h2>
			<h3 class="mb-4">You  made @gameManager.Moves moves and missed <span class="text-danger">@gameManager.Misses</span> times.</h3>
			<button class="btn btn-primary w-100.ss" @onclick=OnPlayAgain>@(gameManager.GameWon ? "Play Next Level" : $"Replay Level {gameManager.GameSettings.GameLevel}")</button>
			@if (gameManager.GameWon)
			{
				<_Confetti />
			}
		</div>
	}
</div>

@code {

	private TileModel[]? Tiles { get; set; }
	private int TileCount { get; set; }
	private IEnumerable<IThemeData>? Themes { get; set; }
	private string SelectedThemeId { get; set; } = "";
	private Config? Config { get; set; }
	private ScoreCollector? ScoreCollector { get; set; }


	protected override void OnInitialized()
	{
		gameManager.OnChange += OnChangeHandler;

		Tiles = [];
		Config = themeService.ThemeConfig;
		TileCount = Config!.DefaultTileCount;
		SelectedThemeId = Config.DefaultTheme;
		Themes = themeService.ThemeDatas;
		ScoreCollector = new ScoreCollector();
	}

	public void Dispose()
	{
		gameManager.OnChange -= OnChangeHandler;
	}

	private async void OnChangeHandler()
	{
		await InvokeAsync(StateHasChanged);
	}

	private void PreloadImages()
	{
		if (Tiles is null) return;
		IEnumerable<string?> images = [];
		images = Tiles.Where(x => x.ContentIsImage()).Select(x => x.Content);
		if (images != null && images.Any())
		{
			jsRuntime.InvokeVoidAsync("preloadImages", images);
		}
	}

	private void OnSettingSave(IGameSettings settings)
	{
		StartNewGame(settings);
	}

	private void StartNewGame(IGameSettings settings)
	{
		try
		{
			gameManager.StartGame(settings);
			SelectedThemeId = gameManager.GameSettings.ThemeData.ThemeId ?? Config!.DefaultTheme;
			TileCount = gameManager.GameSettings.NumberOfTiles;
			Tiles = gameManager!.Tiles;
			PreloadImages();
			StateHasChanged();
		}
		catch (Exception)
		{

			throw;
		}
	}

	private void OnPlayAgain()
	{
		if (gameManager.GameWon)
		{
			gameManager.GameSettings.SetupNextLevel();
		}
		gameManager.ResetGame();
		StartNewGame(gameManager.GameSettings);
		StateHasChanged();
	}

	private void OnAbandonClick()
	{
		gameManager.ResetGame();
		StateHasChanged();
	}
	private void OnFilipAllClick(MouseEventArgs e)
	{
		foreach (var tile in Tiles!)
		{
			tile.IsShown = !tile.IsShown;
		}
	}
}