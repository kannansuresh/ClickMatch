@inject IThemeService themeService
@inject IJSRuntime jsRuntime
@inject GameManagerService gameManager
@implements IDisposable

@if (Themes is not null && !gameManager.GameInProgress && !gameManager.GameWon)
{
	<_SettingsForm Themes=@Themes SelectedThemeId=@SelectedThemeId TileCount=@TileCount OnSubmitClick=@OnSettingSave />
}
@if (Tiles is not null && gameManager.GameInProgress)
{
	<_TileGrid Tiles="Tiles" />

	<p class="p-2">Moves: @gameManager.Moves | Misses: @gameManager.Misses | Score: @(gameManager.GameScorer.Score - (gameManager.Misses * 2)) | Bonus: @gameManager.GameScorer.Bonus | Multiplier: @gameManager.GameScorer.Multiplier</p>

	<p>@gameManager.GameScorer.ToString()</p>


	<div class="d-flex">
		<button class="btn btn-danger btn-sm mt-2" @onclick=OnAbandonClick>Abandon Game</button>
		<button class="btn btn-success btn-sm mt-2" @onclick=OnFilipAllClick>Flip all Tiles</button>
	</div>
}

@if (gameManager.GameWon)
{
	<div class="d-flex flex-column justify-content-center align-items-center">
		<h1 class="mb-4">@(gameManager.GameScorer.TotalScore > 0 ? "You Won!":"You Lost!")</h1>
		<h2 class="mb-4">@($"You scored {gameManager.GameScorer.TotalScore} pts")</h2>
		<h3 class="mb-4">Moves: @gameManager.Moves Misses: @gameManager.Misses</h3>
		<button class="btn btn-primary w-100.ss" @onclick=OnAbandonClick>Play Again</button>
	</div>
}

@code {

	private TileModel[]? Tiles { get; set; }
	private int TileCount { get; set; }
	private IEnumerable<IThemeData>? Themes { get; set; }
	private string SelectedThemeId { get; set; } = "";
	private Config? Config { get; set; }


	protected override void OnInitialized()
	{
		gameManager.OnChange += OnChangeHandler;
	}

	public void Dispose()
	{
		gameManager.OnChange -= OnChangeHandler;
	}

	private async void OnChangeHandler()
	{
		await InvokeAsync(StateHasChanged);
	}

	protected override async Task OnInitializedAsync()
	{

		Tiles = [];
		Config = await themeService.GetConfigAsync("config/config.json");
		TileCount = Config.DefaultTileCount;
		SelectedThemeId = Config.DefaultTheme;
		Themes = await themeService.GetThemesAsync(Config.LocalThemeInfo, Config.HostedThemeInfo);

	}

	private void PreloadImages()
	{
		if (Tiles is null) return;
		IEnumerable<string?> images = [];
		images = Tiles.Where(x => x.ContentIsImage()).Select(x => x.Content);
		if (images != null && images.Any())
		{
			jsRuntime.InvokeVoidAsync("preloadImages", images);
		}
	}

	private void OnSettingSave(IGameSettings settings)
	{
		try
		{
			gameManager.StartGame(settings);
			SelectedThemeId = gameManager.GameSettings.ThemeData.ThemeId ?? Config!.DefaultTheme;
			TileCount = gameManager.GameSettings.NumberOfTiles;
			Tiles = gameManager!.Tiles;
			PreloadImages();
			StateHasChanged();

		}
		catch (Exception)
		{

			throw;
		}



	}

	private void OnAbandonClick()
	{
		gameManager.ResetGame();
		StateHasChanged();
	}
	private void OnFilipAllClick(MouseEventArgs e)
	{
		foreach (var tile in Tiles!)
		{
			tile.IsShown = !tile.IsShown;
		}
	}
}