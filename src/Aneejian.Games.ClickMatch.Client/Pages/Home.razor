@page "/"
@inject IThemeService themeService

<PageTitle>Click and Match</PageTitle>

<div class="container">
	<div class="d-flex flex-column min-vh-100 justify-content-center align-items-center">
		<h1>Aneejian Click and Match</h1>
		<p>Click on the cards to match them.</p>

		@if (Themes is not null)
		{
			@* <_SettingsForm SelectedThemeId="SelectedThemeId" Themes="Themes" OnSubmitClick="OnSettingSave" /> *@
			<_SettingsForm Themes=Themes SelectedThemeId=@SelectedThemeId OnSubmitClick=OnSettingSave />
		}
		@if (Tiles is not null)
		{
			<_TileGrid Tiles="Tiles" />
		}

	</div>
</div>


@code {

	private TileModel[]? Tiles { get; set; }
	private List<ThemeData>? Themes { get; set; }
	private string SelectedThemeId { get; set; } = "";
	private Config? Config { get; set; }


	protected override async Task OnInitializedAsync()
	{

		Tiles = [];
		Config = await themeService.GetConfigAsync("config/config.json");
		SelectedThemeId = Config.DefaultTheme;
		Themes = await themeService.GetThemesAsync(Config.LocalThemeInfo, Config.HostedThemeInfo);
		
	}

	private void OnSettingSave(IGameSettings settings)
	{
		SelectedThemeId = settings.ThemeData.ThemeId;
		Tiles = settings.GenerateTiles().ToArray();
	}
}