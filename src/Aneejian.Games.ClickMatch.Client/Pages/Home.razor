@page "/"
@inject IThemeService themeService
@inject SessionStorageService sessionStorageService
@inject AuthenticationService authenticationService
@inject GameManagerService gameManager
@implements IAsyncDisposable

<PageTitle>Aneejian | Click and Match</PageTitle>

@if (!authenticationService.IsAuthenticated || ShowProfiles)
{
	<_UserProfiles OnUserSelected="OnUserSelected" />
}

<_AuthorizedOnly>
	<CascadingValue Value="LoggedInUser" Name="LoggedInUser" IsFixed=true>
		<p class="mb-4 text-warning">You are loggedin as @($"{LoggedInUser!.Name} ({LoggedInUser.UserName}).") <span><button class="btn btn-link" @onclick=@authenticationService.Logout>Logout</button></span></p>
		<_Game />
	</CascadingValue>
</_AuthorizedOnly>

@code {
	private UserDto? LoggedInUser { get; set; }

	private bool ShowProfiles { get; set; } = true;

	private IThemeService ThemeService => themeService;

	protected override void OnInitialized()
	{
		CheckLogin();
		authenticationService.OnAuthenticationStateChanged += CheckLogin;
		base.OnInitialized();
	}

	private void CheckLogin(bool isAuthenticated)
	{
		if (!authenticationService.IsAuthenticated)
		{
			StateHasChanged();
			try { gameManager.ResetGame(); }
			catch { }
			ShowProfiles = true;
			LoggedInUser = null;
			return;
		}
		CheckLogin();
	}

	private void OnUserSelected(UserDto user)
	{
		LoggedInUser = user;
		ShowProfiles = false;
		StateHasChanged();
	}

	private void CheckLogin()
	{
		var autheticatedUser = authenticationService.AuthenticatedUser;
		LoggedInUser = autheticatedUser;
		StateHasChanged();
	}

	public async ValueTask DisposeAsync()
	{
		if (authenticationService != null)
		{
			await authenticationService.Logout();
			authenticationService.OnAuthenticationStateChanged -= CheckLogin;
		}

	}

}