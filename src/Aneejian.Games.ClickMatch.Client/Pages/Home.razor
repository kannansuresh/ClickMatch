@page "/"
@inject IThemeService themeService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject SessionStorageService sessionStorageService
@inject AuthenticationService authenticationService

<PageTitle>Aneejian | Click and Match</PageTitle>

@if (authenticationService.IsAuthenticated)
{
	<_Game />
}
else
{
	<_UserProfiles />
}

<_AuthorizedOnly>
	<div class="m-5" style="position: fixed; top:0; left:0;">
		<button class="btn btn-danger btn-sm" @onclick=@authenticationService.Logout>Logout</button>
	</div>
</_AuthorizedOnly>

@code {
	private int LoggedInUserId { get; set; }

	private IThemeService ThemeService => themeService;

	protected override async Task OnInitializedAsync()
	{
		
		await CheckLogin();
		authenticationService.OnAuthenticationStateChanged += CheckLogin;
	}

	private async void CheckLogin(bool isAuthenticated)
	{
		if (!authenticationService.IsAuthenticated)
		{
			// await authenticationService.Logout();
			StateHasChanged();
			return;
		}
		await CheckLogin();
	}

	private async Task CheckLogin()
	{
		var stringId = await sessionStorageService.GetValueAsync<string>("profileId");
		if (!string.IsNullOrEmpty(stringId))
		{
			LoggedInUserId = int.Parse(stringId);
			await authenticationService.ValidateLoggedInUser(LoggedInUserId);
		}
		StateHasChanged();
	}

	public void Dispose()
	{
		authenticationService.OnAuthenticationStateChanged -= CheckLogin;
	}
}