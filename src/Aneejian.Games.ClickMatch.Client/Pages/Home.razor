@attribute [Route(AppStrings.Pages.Home)]
@inject IThemeService themeService
@inject SessionStorageService sessionStorageService
@inject AuthenticationService authenticationService
@inject GameManagerService gameManager
@implements IDisposable

<_AccessBased>
	<Authorized>
		<CascadingValue Value="LoggedInUser" Name="LoggedInUser" IsFixed=true>
			<_Game />
		</CascadingValue>
	</Authorized>
	<UnAuthorized>
		@if (ShowProfiles)
		{
			<_UserProfiles OnUserSelected="OnUserSelected" />
			<div class="text-center">
				<_Disclaimer />
			</div>
		}
	</UnAuthorized>
</_AccessBased>

@code {
	private UserDto? LoggedInUser { get; set; }

	private bool ShowProfiles { get; set; } = true;

	private IThemeService ThemeService => themeService;

	protected override void OnInitialized()
	{
		CheckLogin();
		ShowProfiles = !authenticationService.IsAuthenticated;
		authenticationService.OnAuthenticationStateChanged += CheckLogin;
		base.OnInitialized();
	}

	private void CheckLogin(bool isAuthenticated)
	{
		if (!isAuthenticated)
		{
			try { gameManager.ResetGame(); }
			catch { }
			ShowProfiles = true;
			LoggedInUser = null;
			StateHasChanged(); // This is necessary to re-render the component
			return;
		}
		CheckLogin();
	}

	private void OnUserSelected(UserDto user)
	{
		LoggedInUser = user;
		ShowProfiles = false;
	}

	private void CheckLogin()
	{

		var autheticatedUser = authenticationService.AuthenticatedUser;
		LoggedInUser = autheticatedUser;
	}

	public void Dispose()
	{
		if (authenticationService != null)
		{
			authenticationService.OnAuthenticationStateChanged -= CheckLogin;
		}
	}

}