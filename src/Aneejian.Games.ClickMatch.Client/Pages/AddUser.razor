@inject IndexedDbService IndexedDbInteropService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

@attribute [Route(AppStrings.Pages.Register)]

<_AccessBased>
	<Authorized>
		<div>
			<div>
				Please <button type="button" class="btn btn-link m-0 p-0 pb-1 text-decoration-none border-0" @onclick=@NavigateToLogoutPage>logout</button> to continue.
			</div>
		</div>
	</Authorized>
	<UnAuthorized>
		<_AddUserProfile />
	</UnAuthorized>
</_AccessBased>


@code {

	private string DisplayName { get; set; } = string.Empty;
	private string UserName { get; set; } = string.Empty;
	private string Password { get; set; } = string.Empty;
	private string ConfirmPassword { get; set; } = string.Empty;
	private string ErrorMessage { get; set; } = string.Empty;
	private IEnumerable<UserDto>? Users { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await Focus();
		}
	}


	private async Task HandleSubmitClick()
	{
		try
		{
			if (ConfirmPassword != Password)
			{
				SharedMethods.Log("Passwords do not match.");
				return;
			}

			var userDto = new UserDto
				{
					Id = 25,
					Name = DisplayName,
					UserName = UserName,
					Password = Password
				};
			int userId = await IndexedDbInteropService.AddNewUser(userDto);
			Users = await IndexedDbInteropService.GetUsers();
			SharedMethods.Log($"User Id: {userId}");
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
			SharedMethods.Log(ex.Message);
		}

	}

	private void NavigateToLogoutPage()
	{
		navigationManager.NavigateTo(AppStrings.Pages.Logout + "/" + AppStrings.Pages.Register);
	}

	private async Task Focus()
	{
		await JSRuntime.InvokeVoidAsync("focusFirstInput");
	}
}
